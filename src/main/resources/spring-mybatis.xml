<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.1.xsd
                        http://www.springframework.org/schema/aop
     					http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
                        http://www.springframework.org/schema/mvc
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- aspecJ代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.ly"/>

	<!--<bean id="exceptionHandler" class="com.asiainfo.modules.common.MyExceptionHandler"/>-->


	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<!-- 多个PropertyPlaceholderConfigurer，需要设置本属性为true. -->
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="locations">
		       <list>
		          <value>classpath:jdbc.properties</value>
	        </list>
		</property>
	</bean>


	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="${jdbc.testSql}" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<property name="filters" value="config" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 引入实体类别名 -->
		<property name="configLocation" value="classpath:mybatis.xml" />
		<!-- 自动扫描mapping.xml文件 -->
		<!--<property name="mapperLocations" value="classpath:com/wyq/mapping/**/*.xml"></property>-->
		<!-- 加入Mybatis物理分页插件 -->
		<property name="typeAliasesPackage" value="com.isea533.mybatis.model"/>
		  <property name="plugins">
		    <array>
		      <bean class="com.github.pagehelper.PageHelper">
		        <property name="properties">
		          <value>
		            dialect=mysql
		            reasonable=true
		          </value>
		        </property>
		      </bean>
		    </array>
		  </property>
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<!-- com.github.abel533.entity 自动扫描分页主键 -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.ly.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	    <property name="properties">
	        <value>
				mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.special.InsertListMapper
	        </value>
	    </property>
	</bean>

	<!-- 通用Mapper组件 3.0x配置 -->
	<bean id="entityMapper" class="com.github.abel533.entity.EntityMapper" scope="prototype">
	   <constructor-arg ref="commonMapper"/>
	</bean>

	<bean id="sqlMapper" class="com.github.abel533.sql.SqlMapper" scope="prototype">
	   <constructor-arg ref="sqlSession"/>
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
	   <constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 面向切面进行事物管理 -->
    <aop:config>
		<aop:pointcut expression="execution(public * com.ly.service.*Impl.*(..))" id="pointcut"/>
		<aop:advisor advice-ref="txAdviceSysParameter" pointcut-ref="pointcut"/>
	</aop:config>
	<tx:advice id="txAdviceSysParameter" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="submit" propagation="REQUIRED"/>
			<tx:method name="tempSave" propagation="REQUIRED"/>
			<tx:method name="sendVerifyCode" propagation="REQUIRED"/>
		</tx:attributes>
	</tx:advice>
</beans>